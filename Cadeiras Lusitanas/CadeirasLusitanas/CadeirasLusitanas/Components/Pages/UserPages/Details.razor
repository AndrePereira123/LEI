@page "/users/details"
@using Microsoft.EntityFrameworkCore
@using CadeirasLusitanas.Models.Entities
@inject IDbContextFactory<CadeirasLusitanas.Data.CadeirasLusitanasContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering]
@attribute [Authorize(Roles = "ADMIN")]


<PageTitle>Details</PageTitle>

<h1>Detalhes</h1>

<div>
    <h2>Utilizador</h2>
    <hr />
    @if (user is null)
    {
        <p><em>A carregar...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">email</dt>
            <dd class="col-sm-10">@user.email</dd>
            <dt class="col-sm-2">password</dt>
            <dd class="col-sm-10">@user.password</dd>
            <dt class="col-sm-2">tipo</dt>
            <dd class="col-sm-10">@user.type</dd>
        </dl>
        <div>
            <a href="@($"/users/edit?id={user.Id}")">Editar</a> |
            <a href="@($"/users")">Voltar</a>
        </div>
    }
</div>

@code {
    private User? user;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        user = await context.User.FirstOrDefaultAsync(m => m.Id == Id);

        if (user is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
